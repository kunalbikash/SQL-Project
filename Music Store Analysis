# SQL Questions and Answers

## Basic Questions

### 1. List all album titles along with the artist names.
```sql
SELECT album.title AS Album_Title, artist.name AS Artist_Name
FROM album
JOIN artist ON album.artist_id = artist.artist_id;
```

### 2. Retrieve all tracks that belong to the 'Rock' genre.
```sql
SELECT track.name AS Track_Name
FROM track
JOIN genre ON track.genre_id = genre.genre_id
WHERE genre.name = 'Rock';
```

### 3. Find all playlists that include a track named 'Bohemian Rhapsody'.
```sql
SELECT DISTINCT playlist.name AS Playlist_Name
FROM playlist
JOIN playlist_track ON playlist.playlist_id = playlist_track.playlist_id
JOIN track ON playlist_track.track_id = track.track_id
WHERE track.name = 'Bohemian Rhapsody';
```

### 4. List all customers along with their email addresses.
```sql
SELECT customer.first_name || ' ' || customer.last_name AS Full_Name, customer.email
FROM customer;
```

---

## Intermediate Questions

### 1. Find the total number of tracks in each genre.
```sql
SELECT genre.name AS Genre, COUNT(track.track_id) AS Total_Tracks
FROM genre
JOIN track ON genre.genre_id = track.genre_id
GROUP BY genre.name
ORDER BY Total_Tracks DESC;
```

### 2. Calculate the total revenue generated by each customer.
```sql
SELECT customer.first_name || ' ' || customer.last_name AS Customer_Name, 
       SUM(invoice_line.unit_price * invoice_line.quantity) AS Total_Revenue
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
JOIN invoice_line ON invoice.invoice_id = invoice_line.invoice_id
GROUP BY customer.customer_id
ORDER BY Total_Revenue DESC;
```

### 3. Identify the employees who report to a manager and list their managers' names.
```sql
SELECT e.first_name || ' ' || e.last_name AS Employee_Name, 
       m.first_name || ' ' || m.last_name AS Manager_Name
FROM employee e
JOIN employee m ON e.reports_to = m.employee_id;
```

### 4. List the top 5 most expensive tracks along with their album titles.
```sql
SELECT track.name AS Track_Name, album.title AS Album_Title, track.unit_price AS Price
FROM track
JOIN album ON track.album_id = album.album_id
ORDER BY track.unit_price DESC
LIMIT 5;
```

### 5. Find the average track length (in milliseconds) for each media type.
```sql
SELECT media_type.name AS Media_Type, 
       AVG(track.milliseconds) AS Average_Length
FROM media_type
JOIN track ON media_type.media_type_id = track.media_type_id
GROUP BY media_type.name;
```

### 6. Retrieve the top 3 genres with the highest total revenue.
```sql
SELECT genre.name AS Genre, 
       SUM(invoice_line.unit_price * invoice_line.quantity) AS Total_Revenue
FROM genre
JOIN track ON genre.genre_id = track.genre_id
JOIN invoice_line ON track.track_id = invoice_line.track_id
GROUP BY genre.name
ORDER BY Total_Revenue DESC
LIMIT 3;
